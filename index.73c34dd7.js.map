{"mappings":"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","sources":["src/js/rendering/render.js","src/js/fetches/movies.js","src/js/loader.js","src/js/search-form-handler.js","src/index.js"],"sourcesContent":["// import { defaultImage } from '../../images/background/gallery_default_image';\nconst defaultImage = '../../images/background/gallery_default_image.jpg';\nconst gallery = document.querySelector('.gallery');\n\n// ------> RENDERING POPULAR/SEARCH GALLERY:\n\nexport const renderMovies = movies => {\n  const markupMovies = movies\n    .map(movie => {\n      if (movie.poster_path !== null) {\n        return `<div class=\"movie-card\" data-movie-id=\"${movie.id}\">\n          <div class=\"movie-card-poster\"><img class=\"movie-img\" src=\"https://image.tmdb.org/t/p/original${\n            movie.poster_path\n          }\" width=375 height=574 alt=\"${\n          movie.original_title\n        }\" loading=\"lazy\" /></div>\n          <p class=\"movie-title\">${movie.original_title}</p>\n          <div class=\"movie-subtitle\">\n            <p class=\"movie-genre\">${movie.genre_ids}</p>\n            <p class=\"movie-year\">${parseInt(movie.release_date)}</p>\n            <p><button class=\"movie-vote\" type=\"button\">${movie.vote_average.toPrecision(\n              2\n            )}</button>\n            </p>\n          </div>\n        </div>`;\n      } else {\n        return `<div class=\"movie-card\" data-movie-id=\"${movie.id}\">\n        <div class=\"movie-card-poster\"></div>\n          <p class=\"movie-title\">${movie.original_title}</p>\n          <div class=\"movie-subtitle\">\n            <p class=\"movie-genre\">${movie.genre_ids}</p>\n            <p class=\"movie-year\">${parseInt(movie.release_date)}</p>\n            <p><button class=\"movie-vote\" type=\"button\">${movie.vote_average.toPrecision(\n              2\n            )}</button>\n            </p>\n          </div>\n        </div>`;\n      }\n    })\n    .join('');\n  gallery.insertAdjacentHTML('beforeend', markupMovies);\n};\n\n// -----> RENDERING USER'S QUEUED/WATCHED LIBRARY:\n\nexport const renderLibrary = movies => {\n  const markupLibrary = movies\n    .map(movie => {\n      if (movie.poster_path !== null) {\n        return `<div class=\"movie-card\" data-movie-id=\"${movie.id}\">\n          <img class=\"movie-img\" src=\"https://image.tmdb.org/t/p/original${\n            movie.poster_path\n          }\" height=574 alt=\"${movie.original_title}\" loading=\"lazy\" />\n          <p class=\"movie-title\">${movie.original_title}</p>\n          <div class=\"movie-subtitle\">\n            <p class=\"movie-genre\">${movie.genre_ids}</p>\n            <p class=\"movie-year\">${parseInt(movie.release_date)}</p>\n            <p><button class=\"movie-vote\" type=\"button\">${movie.vote_average.toPrecision(\n              2\n            )}</button>\n            </p>\n          </div>\n        </div>`;\n      } else {\n        return `<div class=\"movie-card\" data-movie-id=\"${movie.id}\">\n          <img class=\"movie-img\" src=\"${defaultImage}\" height=574 alt=\"${\n          movie.original_title\n        }\" loading=\"lazy\"/>\n          <p class=\"movie-title\">${movie.original_title}</p>\n          <div class=\"movie-subtitle\">\n            <p class=\"movie-genre\">${movie.genre_ids}</p>\n            <p class=\"movie-year\">${parseInt(movie.release_date)}</p>\n            <p><button class=\"movie-vote\" type=\"button\">${movie.vote_average.toPrecision(\n              2\n            )}</button>\n            </p>\n          </div>\n        </div>`;\n      }\n    })\n    .join('');\n  gallery.insertAdjacentHTML('beforeend', markupLibrary);\n};\n\n// -----> EXAMPLE FETCH FOR GALLERY RENDER:\n\n// const API_KEY = 'b118f38ec77100db6763b4cc83604589';\n// const fetchTrendingMovies = async () => {\n//   const movieGallery = `https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY}`;\n//   try {\n//     const response = await fetch(movieGallery);\n//     const movies = await response.json();\n//     return movies;\n//   } catch (error) {\n//     console.log(error);\n//   }\n// };\n\n// const startRenderingTrendingMovies = async () => {\n//   const trendingMovies = await fetchTrendingMovies();\n//   console.log(trendingMovies);\n//   renderMovies(trendingMovies.results);\n// };\n\n// startRenderingTrendingMovies();\n","import { renderMovies } from '../rendering/render';\nimport { loadMovie } from '../loader.js';\n\n// ------ nessesary for work ------\nconst apiKey = '11f568ee70218bec08ad7368f7bb3250';\nconst apiUrl = 'https://api.themoviedb.org/3/search/movie';\nconst searchPopularUrl = 'https://api.themoviedb.org/3/movie/popular';\nconst searchGenresUrl = 'https://api.themoviedb.org/3/genre/movie/list';\nconst searchByMovieIdUrl = 'https://api.themoviedb.org/3/movie/';\nconst NO_HIT_INFO_DIV_DOM = document.querySelector('.header-no-hit-info');\nlet page = 1;\n\n// może być przydatne do wyciągnięcia języka przeglądarki użytkownika - do zmiany języka strony/opisów filmów itd.\n// const userLocaleLang =\n//   navigator.languages && navigator.languages.length\n//     ? navigator.languages[0]\n//     : navigator.language;\n\n//  1.    ------ Function - fetch - Popular movies ------\nexport const getPopular = async (page = 1) => {\n  try {\n    const response = await fetch(\n      searchPopularUrl + `?api_key=` + apiKey + '&page=' + page\n    );\n    // response Status:404 handling\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    const data = await response.json();\n    console.log('Poniżej przykladowy console.log dla popularnych');\n    console.log(data);\n    // TO DO function here!\n    renderMovies(data.results);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n//  2.    ------ function fetch - get movies by title ------\n// movieTitle is a .value from header input\nexport const getMoviesByTitle = async movieTitle => {\n  try {\n    NO_HIT_INFO_DIV_DOM.textContent = '';\n    const response = await fetch(\n      apiUrl + `?api_key=` + apiKey + '&query=' + movieTitle + '&page=' + page\n    );\n    // response Status:404 handling\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    const data = await response.json();\n    if (!data.total_results) {\n      NO_HIT_INFO_DIV_DOM.textContent =\n        'Search result not successful. Enter the correct movie name and search again.';\n      console.log('pusta tablica');\n      return;\n    };\n    console.log(`Poniżej przykladowy console.log dla filmu \"${movieTitle}\"`);\n    console.log(data);\n    loadMovie()\n    //TO DO function here!\n    renderMovies(data.results);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// 3.     ------ function fetch - get whole movies genres ------\n//?api_key=<<api_key>>&language=en-US\nexport const getMovieGenres = async () => {\n  try {\n    const response = await fetch(searchGenresUrl + `?api_key=` + apiKey);\n    // response Status:404 handling\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    const data = await response.json();\n    console.log('Poniżej przykladowy console.log dla listy gatunków');\n    console.log(data);\n    //TO DO function here!\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n//  4.    ------ Function - fetch - get movie details object by movie ID ------\nexport const getMovieById = async movieId => {\n  try {\n    const response = await fetch(\n      searchByMovieIdUrl + movieId + `?api_key=` + apiKey\n    );\n    // response Status:404 handling\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    const data = await response.json();\n    console.log(\n      `Poniżej console.log dla jednego filmu (${data.original_title}) po movieId: ${movieId}`\n    );\n    console.log(data);\n    //TO DO function here!\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n//  5.    ------ Function - fetch - get trailer's url by movie ID ------\nexport const returnTrailerUrlByMovieId = async movieId => {\n  try {\n    const response = await fetch(\n      searchByMovieIdUrl + movieId + '/videos' + `?api_key=` + apiKey\n    );\n    // response Status:404 handling\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    const data = await response.json();\n    const findIndexOfKeyTrailer = data.results.findIndex(\n      youtubeKey => youtubeKey.type === 'Trailer'\n    );\n    const youtubeKey = data.results[findIndexOfKeyTrailer].key;\n    const movieTrailerUrl = `https://www.youtube.com/watch?v=${youtubeKey}`;\n    console.log(\n      `Poniżej link do Video na Youtube jednego filmu po movieId: ${movieId}`\n    );\n    console.log(movieTrailerUrl);\n    return movieTrailerUrl;\n    //TO DO function here!\n  } catch (error) {\n    console.error(error);\n  }\n};\n","    export const loadGallery = () => {window.addEventListener(\"load\", ()=>{\n        const loader = document.querySelector('.loader')\n        loader.classList.remove(\"loader-hidden\")\n        let timeout\n        timeout = setTimeout(()=>{loader.classList.add(\"loader-hidden\")},1500) \n        console.log(loader.classList)})\n        console.log('loadGallery work')\n        }\n\n    export const loadMovie = () => {\n        const gallery = document.querySelector('form')\n        gallery.addEventListener(\"submit\", ()=>{\n            const loader = document.querySelector('.loader')\n            loader.classList.remove(\"loader-hidden\")\n            let timeout\n            timeout = setTimeout(()=>{loader.classList.add(\"loader-hidden\")},1500) \n            console.log(loader.classList)})\n        console.log('loadMovie work')\n    }","import { getMoviesByTitle } from './fetches/movies';\n\nconst GALLERY_DOM = document.querySelector('.gallery');\nconst INPUT_DOM = document.querySelector('.header-input__text-box');\nconst NO_HIT_INFO_DIV_DOM = document.querySelector('.header-no-hit-info');\n\nexport function handleSubmit(event) {\n  event.preventDefault();\n\n  const searchingPhrasesTrimmed = INPUT_DOM.value.trim();\n  NO_HIT_INFO_DIV_DOM.textContent = '';\n  if (!searchingPhrasesTrimmed) {\n    NO_HIT_INFO_DIV_DOM.textContent = 'Type anything...';\n    return;\n  }\n\n  GALLERY_DOM.textContent = '';\n  getMoviesByTitle(searchingPhrasesTrimmed);\n}\n","import {\n  getMoviesByTitle,\n  getPopular,\n  getMovieGenres,\n  getMovieById,\n  returnTrailerUrlByMovieId,\n} from './js/fetches/movies.js';\n//*? Powyższy import nie jest jeszcze używany - możliwe, że nie będzie potrzebny w ogóle.\nimport { handleSubmit } from './js/search-form-handler.js';\n//loader gallery\nimport { loadGallery } from './js/loader.js';\n\nconst FORM_DOM = document.querySelector('.header-input__form');\n\nFORM_DOM.addEventListener('submit', handleSubmit);\n\n//for result for \"Rambo\" check console and use example from below\n// getMoviesByTitle('Rambo');\nloadGallery()\ngetPopular();\ngetMovieGenres();\nlet oldMovieIdExample = '1369'; // Film: Rambo First Blood\nlet newMovieIdExample = '603692'; // Film: JOHN WICK: CHAPTER 4 (z 2023 roku)\ngetMovieById(newMovieIdExample);\nreturnTrailerUrlByMovieId(newMovieIdExample);\n// import { renderMovies } from './js/rendering/render.js';\n"],"names":["$bce6340fb64d7774$var$gallery","document","querySelector","$bce6340fb64d7774$export$1a30573fde3dfc62","movies","markupMovies","map","movie","poster_path","id","original_title","genre_ids","parseInt","release_date","vote_average","toPrecision","join","insertAdjacentHTML","$b099a20c123379bc$var$NO_HIT_INFO_DIV_DOM","$b099a20c123379bc$export$4c39390267f2b109","async","movieTitle","textContent","response","fetch","$b099a20c123379bc$var$apiUrl","ok","Error","status","data","json","total_results","console","log","addEventListener","loader","timeout","classList","remove","setTimeout","add","results","error","$f196cf184bbcfd78$var$GALLERY_DOM","$f196cf184bbcfd78$var$INPUT_DOM","$f196cf184bbcfd78$var$NO_HIT_INFO_DIV_DOM","event","preventDefault","searchingPhrasesTrimmed","value","trim","window","page1","$b099a20c123379bc$var$searchPopularUrl","$b099a20c123379bc$var$searchGenresUrl","movieId","$b099a20c123379bc$var$searchByMovieIdUrl","findIndexOfKeyTrailer","findIndex","youtubeKey","type","movieTrailerUrl","key"],"version":3,"file":"index.73c34dd7.js.map"}