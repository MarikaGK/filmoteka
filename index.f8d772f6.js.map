{"mappings":"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","sources":["src/js/rendering/render-genres.js","src/js/rendering/render-movies.js","src/js/fetching/fetch-movies.js","src/js/utils/loader.js","src/js/utils/search-form-handler.js","src/index.js"],"sourcesContent":["// ------ GENRES RENDERING ------\n\n// ---- setting fetched array of ids genres to local storage ------\nexport const saveMovieGenresToStorage = d => {\n  const movieGenresIds = d.genres;\n  localStorage.setItem('movieGenresIdsArray', JSON.stringify(movieGenresIds));\n};\n\n// ---- rendering array of ids genres from local storage to JS ------\nconst getMovieGenresFromStorage = () => {\n  const movieGenresIdsJSON = localStorage.getItem('movieGenresIdsArray');\n  const parsedGenresIDS = JSON.parse(movieGenresIdsJSON);\n  return parsedGenresIDS;\n};\n\n// ----- genres and ids array rendered from local storage -----\nconst genresIdArray = getMovieGenresFromStorage();\nconsole.log(`to jest genresIdArray`);\nconsole.log(genresIdArray);\n\n// ----- searching movie genre via genre id ------------\nconst compareGenresId = id => {\n  const genreName = genresIdArray.filter(e => e.id === id);\n  return genreName[0].name;\n};\n\n// ----- rendering ids into genres ----------\nexport const renderGenresToGallery = genreIds => {\n  const markupIds = genreIds.slice(0, 3).map(id => compareGenresId(id));\n  return markupIds.join(', ');\n};\n","import { renderGenresToGallery } from './render-genres';\n\nconst gallery = document.querySelector('.gallery');\n\n// ------> RENDERING POPULAR/SEARCH GALLERY:\n\nexport const renderMovies = movies => {\n  const markupMovies = movies\n    .map(movie => {\n      const genres = renderGenresToGallery(movie.genre_ids);\n      if (movie.poster_path !== null) {\n        return `<div class=\"movie-card\" data-movie-id=\"${movie.id}\">\n          <div class=\"movie-card-poster\">\n          <img class=\"movie-img\" src=\"https://image.tmdb.org/t/p/original${\n            movie.poster_path\n          }\" width=280 alt=\"${movie.original_title}\" loading=\"lazy\" />\n              </div>\n            <div class=\"movie-card-description\">\n              <p class=\"movie-title\">${movie.original_title}</p>\n              <div class=\"movie-subtitle\">\n              <span class=\"movie-genre\">${genres}  |</span>\n              <span class=\"movie-year\">${parseInt(movie.release_date)}</span>\n            </div>\n          </div>\n          </div>`;\n      } else {\n        return `<div class=\"movie-card\" data-movie-id=\"${movie.id}\">\n        <div class=\"movie-card-poster\"></div>\n        <div class=\"movie-card-description\">  \n          <p class=\"movie-title\">${movie.original_title}</p>\n          <div class=\"movie-subtitle\">\n            <span class=\"movie-genre\">${genres}  |</span>\n            <span class=\"movie-year\">${parseInt(movie.release_date)}</span>\n          </div>\n        </div>\n        </div>`;\n      }\n    })\n    .join('');\n  gallery.insertAdjacentHTML('beforeend', markupMovies);\n};\n\n// -----> RENDERING USER'S QUEUED/WATCHED LIBRARY:\n\nexport const renderLibrary = movies => {\n  const markupLibrary = movies\n    .map(movie => {\n      const genres = renderGenresToGallery(movie.genre_ids);\n      if (movie.poster_path !== null) {\n        return `<div class=\"movie-card\" data-movie-id=\"${movie.id}\">\n          <div class=\"movie-card-poster\">\n            <img class=\"movie-img\" src=\"https://image.tmdb.org/t/p/original${\n              movie.poster_path\n            }\" width=280 alt=\"${movie.original_title}\" loading=\"lazy\" />\n            </div>\n            <div class=\"movie-card-description\">\n              <p class=\"movie-title\">${movie.original_title}</p>\n              <div class=\"movie-subtitle\">\n                <span class=\"movie-genre\">${genres}  |</span>\n                <span class=\"movie-year\">${parseInt(movie.release_date)}</span>\n                <span class=\"movie-vote\">${movie.vote_average.toPrecision(\n                  2\n                )}</span>\n              </div>\n            </div>\n            </div>`;\n      } else {\n        return `<div class=\"movie-card\" data-movie-id=\"${movie.id}\">\n          <div class=\"movie-card-poster\"></div>\n          <div class=\"movie-card-description\">  \n            <p class=\"movie-title\">${movie.original_title}</p>\n            <div class=\"movie-subtitle\">\n              <span class=\"movie-genre\">${genres}  |</span>\n              <span class=\"movie-year\">${parseInt(movie.release_date)}</span>\n              <span class=\"movie-vote\">${movie.vote_average.toPrecision(\n                2\n              )}</span>\n            </div>\n          </div>\n          </div>`;\n      }\n    })\n    .join('');\n  gallery.insertAdjacentHTML('beforeend', markupLibrary);\n};\n\n// -----> EXAMPLE FETCH FOR GALLERY RENDER:\n\n// const API_KEY = 'b118f38ec77100db6763b4cc83604589';\n// const fetchTrendingMovies = async () => {\n//   const movieGallery = `https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY}`;\n//   try {\n//     const response = await fetch(movieGallery);\n//     const movies = await response.json();\n//     return movies;\n//   } catch (error) {\n//     console.log(error);\n//   }\n// };\n\n// const startRenderingTrendingMovies = async () => {\n//   const trendingMovies = await fetchTrendingMovies();\n//   console.log(trendingMovies);\n//   renderMovies(trendingMovies.results);\n// };\n\n// startRenderingTrendingMovies();\n","import { saveMovieGenresToStorage } from '../rendering/render-genres';\nimport { renderMovies } from '../rendering/render-movies';\nimport { showLoader } from '../utils/loader';\n\n// ------> CONSTANTS USED IN THE PROJECT:\n\nconst apiKey = '11f568ee70218bec08ad7368f7bb3250';\nconst apiUrl = 'https://api.themoviedb.org/3/search/movie';\nconst searchPopularUrl = 'https://api.themoviedb.org/3/movie/popular';\nconst searchGenresUrl = 'https://api.themoviedb.org/3/genre/movie/list';\nconst searchByMovieIdUrl = 'https://api.themoviedb.org/3/movie/';\nconst NO_HIT_INFO_DIV_DOM = document.querySelector('.header-no-hit-info');\nlet page = 1;\n\nexport const getMovieGenresAndSaveToStore = async () => {\n  try {\n    const response = await fetch(searchGenresUrl + `?api_key=` + apiKey);\n    // response Status:404 handling\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    const data = await response.json();\n    console.log(data.genres);\n\n    saveMovieGenresToStorage(data);\n    return;\n\n    //TODO function here!\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n//  2.    ------ Function fetch - get popular movies ------\n\nexport const getPopularMovies = async (page = 1) => {\n  try {\n    const response = await fetch(\n      searchPopularUrl + `?api_key=` + apiKey + '&page=' + page\n    );\n    // response Status:404 handling\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    const data = await response.json();\n    console.log(data);\n\n    // TODO function here!\n    renderMovies(data.results);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n//  3.    ------ function fetch - get movies by title ------\n\n// movieTitle is a .value from header input\nexport const getMoviesByTitle = async movieTitle => {\n  try {\n    NO_HIT_INFO_DIV_DOM.textContent = '';\n    const response = await fetch(\n      apiUrl + `?api_key=` + apiKey + '&query=' + movieTitle + '&page=' + page\n    );\n    // response Status:404 handling\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    const data = await response.json();\n    if (!data.total_results) {\n      NO_HIT_INFO_DIV_DOM.textContent =\n        'Search result not successful. Enter the correct movie name and search again.';\n      console.log('pusta tablica');\n      return;\n    }\n    console.log(`Poniżej przykladowy console.log dla filmu \"${movieTitle}\"`);\n    console.log(data);\n    showLoader();\n\n    //TODO function here!\n    renderMovies(data.results);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n//  4.    ------ Function fetch - get movie (details object) by movie ID ------\n\nexport const getMovieById = async movieId => {\n  try {\n    const response = await fetch(\n      searchByMovieIdUrl + movieId + `?api_key=` + apiKey\n    );\n    // response Status:404 handling\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    const data = await response.json();\n    console.log(\n      `Poniżej console.log dla jednego filmu (${data.original_title}) po movieId: ${movieId}`\n    );\n    console.log(data);\n\n    //TODO function here!\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n//  5.    ------ Function fetch - get trailer's url by movie ID ------\n\nexport const getTrailerUrlByMovieId = async movieId => {\n  try {\n    const response = await fetch(\n      searchByMovieIdUrl + movieId + '/videos' + `?api_key=` + apiKey\n    );\n    // response Status:404 handling\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    const data = await response.json();\n    const findIndexOfKeyTrailer = data.results.findIndex(\n      youtubeKey => youtubeKey.type === 'Trailer'\n    );\n    const youtubeKey = data.results[findIndexOfKeyTrailer].key;\n    const movieTrailerUrl = `https://www.youtube.com/watch?v=${youtubeKey}`;\n    console.log(movieTrailerUrl);\n\n    return movieTrailerUrl;\n\n    //TODO function here!\n  } catch (error) {\n    console.error(error);\n  }\n};\n","import { getMovieGenresAndSaveToStore } from '../fetching/fetch-movies';\n\nconst checkGenresInLocalStorage = () => {\n  if (localStorage.getItem('movieGenresIdsArray')) {\n    return;\n  }\n  getMovieGenresAndSaveToStore();\n};\n\nexport const startLoader = () => {\n  window.addEventListener('load', () => {\n    checkGenresInLocalStorage();\n    const loader = document.querySelector('.loader');\n    loader.classList.remove('loader-hidden');\n    let timeout;\n    timeout = setTimeout(() => {\n      loader.classList.add('loader-hidden');\n    }, 1500);\n    console.log(loader.classList);\n  });\n  console.log('startLoader work');\n};\n\nexport const showLoader = () => {\n  const gallery = document.querySelector('form');\n  gallery.addEventListener('submit', () => {\n    const loader = document.querySelector('.loader');\n    loader.classList.remove('loader-hidden');\n    let timeout;\n    timeout = setTimeout(() => {\n      loader.classList.add('loader-hidden');\n    }, 1500);\n    console.log(loader.classList);\n  });\n  console.log('showLoader work');\n};\n","import { getMoviesByTitle } from '../fetching/fetch-movies';\n\nconst GALLERY_DOM = document.querySelector('.gallery');\nconst INPUT_DOM = document.querySelector('.header-input__text-box');\nconst NO_HIT_INFO_DIV_DOM = document.querySelector('.header-no-hit-info');\n\nexport function handleSubmit(event) {\n  event.preventDefault();\n\n  const searchingPhrasesTrimmed = INPUT_DOM.value.trim();\n  NO_HIT_INFO_DIV_DOM.textContent = '';\n  if (!searchingPhrasesTrimmed) {\n    NO_HIT_INFO_DIV_DOM.textContent = 'Type your movie title here';\n    return;\n  }\n\n  GALLERY_DOM.textContent = '';\n  getMoviesByTitle(searchingPhrasesTrimmed);\n}\n","import {\n  getMoviesByTitle,\n  getPopularMovies,\n  getMovieGenresAndSaveToStore,\n  getMovieById,\n  getTrailerUrlByMovieId,\n} from './js/fetching/fetch-movies.js';\n\nimport { handleSubmit } from './js/utils/search-form-handler.js';\n//loader gallery\nimport { startLoader } from './js/utils/loader.js';\n\nconst FORM_DOM = document.querySelector('.header-input__form');\n\nFORM_DOM.addEventListener('submit', handleSubmit);\n\ngetMovieGenresAndSaveToStore();\nstartLoader();\ngetPopularMovies();\nlet oldMovieIdExample = '1369'; // Film: Rambo First Blood\nlet newMovieIdExample = '603692'; // Film: JOHN WICK: CHAPTER 4 (z 2023 roku)\ngetMovieById(newMovieIdExample);\ngetTrailerUrlByMovieId(newMovieIdExample);\n"],"names":["$c11a7df8bc75365e$export$a12099b94319b5b9","d","movieGenresIds","genres","localStorage","setItem","JSON","stringify","$c11a7df8bc75365e$var$genresIdArray","movieGenresIdsJSON","getItem","parse","$c11a7df8bc75365e$var$getMovieGenresFromStorage","console","log","$c11a7df8bc75365e$export$d242b2eef2178345","genreIds","slice","map","id","filter","e","name","$c11a7df8bc75365e$var$compareGenresId","join","$de8e3a446da821b6$var$gallery","document","querySelector","$de8e3a446da821b6$export$1a30573fde3dfc62","movies","markupMovies","movie","genre_ids","poster_path","original_title","parseInt","release_date","insertAdjacentHTML","$7ef1ce436fc7cc86$var$NO_HIT_INFO_DIV_DOM","$7ef1ce436fc7cc86$export$554abc1f5221ffd9","async","response","fetch","$7ef1ce436fc7cc86$var$searchGenresUrl","ok","Error","status","data","json","error","$7ef1ce436fc7cc86$export$4c39390267f2b109","movieTitle","textContent","$7ef1ce436fc7cc86$var$apiUrl","total_results","addEventListener","loader","timeout","classList","remove","setTimeout","add","results","$009e8cd9d9dd22d5$var$GALLERY_DOM","$009e8cd9d9dd22d5$var$INPUT_DOM","$009e8cd9d9dd22d5$var$NO_HIT_INFO_DIV_DOM","event","preventDefault","searchingPhrasesTrimmed","value","trim","window","page1","$7ef1ce436fc7cc86$var$searchPopularUrl","movieId","$7ef1ce436fc7cc86$var$searchByMovieIdUrl","findIndexOfKeyTrailer","findIndex","youtubeKey","type","movieTrailerUrl","key"],"version":3,"file":"index.f8d772f6.js.map"}