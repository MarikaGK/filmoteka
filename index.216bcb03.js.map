{"mappings":"AAAA,MAAMA,EAAUC,SAASC,cAAc,YAI1BC,EAAeC,IAC1B,MAAMC,EAAeD,EAClBE,KAAIC,GACI,gDACgCA,EAAMC,8EAE3CD,EAAME,gCACaF,EAAMG,yDAEFH,EAAMG,kGAGJH,EAAMI,0DAEPC,SAASL,EAAMM,gGAGMN,EAAMO,aAAaC,YAC5D,gEAOPC,KAAK,IAERhB,EAAQiB,mBAAmB,YAAaZ,EAAa,ECdhD,MAqBMa,EAAmBC,MAAMC,IACpC,IACE,MAAMC,QAAiBC,MACrBC,4FAA4CH,EAA5CG,WAGF,IAAKF,EAASG,GACZ,MAAM,IAAIC,MAAMJ,EAASK,QAE3B,MAAMC,QAAaN,EAASO,OAC5BC,QAAQC,IAAI,8CAA4CV,MACvDS,QAAOC,IAAIH,GAEZxB,EAAawB,EAAKI,Q,CAClB,MAAOC,GACPH,QAAQG,MAAMA,E,GCnDZC,EAAchC,SAASC,cAAc,YACrCgC,EAAYjC,SAASC,cAAc,2BCOxBD,SAASC,cAAc,uBAE/BiC,iBAAiB,UDPnB,SAAsBC,GAC3BA,EAAMC,iBAEN,MAAMC,EAA0BJ,EAAUK,MAAMC,OAE3CF,IAILL,EAAYQ,YAAc,GAC1BvB,EAAiBoB,G,IDEOnB,OAAOuB,EAAO,KACtC,IACE,MAAMrB,QAAiBC,MACrBqB,4FAAqDD,GAGvD,IAAKrB,EAASG,GACZ,MAAM,IAAIC,MAAMJ,EAASK,QAE3B,MAAMC,QAAaN,EAASO,OAC5BC,QAAQC,IAAI,mDACXD,QAAOC,IAAIH,GAEZxB,EAAawB,EAAKI,Q,CAClB,MAAOC,GACPH,QAAQG,MAAMA,E,GEhBlB,GF2C8Bb,WAC5B,IACE,MAAME,QAAiBC,MAAMsB,0FAE7B,IAAKvB,EAASG,GACZ,MAAM,IAAIC,MAAMJ,EAASK,QAE3B,MAAMC,QAAaN,EAASO,OAC5BC,QAAQC,IAAI,sDACVD,QAAMC,IAAIH,E,CAEZ,MAAOK,GACPH,QAAQG,MAAMA,E,GEtDlB,GF2D4Bb,OAAM0B,IAChC,IACE,MAAMxB,QAAiBC,MAvEA,sCAwEAuB,EAArBC,6CAGF,IAAKzB,EAASG,GACZ,MAAM,IAAIC,MAAMJ,EAASK,QAE3B,MAAMC,QAAaN,EAASO,OAC5BC,QAAQC,IACN,0CAAwCH,EAAOjB,+BAA8BmC,KAE/EhB,QAAQC,IAAIH,E,CAGZ,MAAOK,GACPH,QAAQG,MAAMA,E,GEzElB,CADwB,UF+EiBb,OAAM0B,IAC7C,IACE,MAAMxB,QAAiBC,MA7FA,sCA8FAuB,EAArBC,oDAGF,IAAKzB,EAASG,GACZ,MAAM,IAAIC,MAAMJ,EAASK,QAE3B,MAAMC,QAAaN,EAASO,OACtBmB,EAAwBpB,EAAKI,QAAQiB,WACzCC,GAAkC,YAApBA,EAAWC,OAGrBC,EAAkB,mCADLxB,EAAKI,QAAQgB,GAAuBK,MAEvDvB,QAAQC,IACN,8DAA4De,KAE9DhB,QAAQC,IAAIqB,E,CAGZ,MAAOnB,GACPH,QAAQG,MAAMA,E,GEnGlB,CAFwB","sources":["src/js/rendering/render.js","src/js/fetches/movies.js","src/js/search-form-handler.js","src/index.js"],"sourcesContent":["const gallery = document.querySelector('.gallery');\n\n// ------> RENDERING POPULAR/SEARCH GALLERY:\n\nexport const renderMovies = movies => {\n  const markupMovies = movies\n    .map(movie => {\n      return `\n    <div class=\"movie-card\" data-movie-id=\"${movie.id}\">\n      <img class=\"movie-img\" src=\"https://image.tmdb.org/t/p/original${\n        movie.poster_path\n      }\" height=574 alt=\"${movie.original_title}\"/>\n    \n      <p class=\"movie-title\">${movie.original_title}\n      </p>\n      <div class=\"movie-subtitle\">\n        <p class=\"movie-genre\">${movie.genre_ids}\n        </p>\n        <p class=\"movie-year\">${parseInt(movie.release_date)}\n        </p>\n        <p>\n          <button class=\"movie-vote\" type=\"button\">${movie.vote_average.toPrecision(\n            2\n          )}</button>\n        </p>\n      </div>\n    </div>\n  </a>`;\n    })\n    .join('');\n\n  gallery.insertAdjacentHTML('beforeend', markupMovies);\n};\n\n// -----> RENDERING USER'S QUEUED/WATCHED LIBRARY:\n\nexport const renderLibrary = movies => {\n  const markupLibrary = movies\n    .map(movie => {\n      return `\n    <div class=\"movie-card\" data-movie-id=\"${movie.id}\">\n      <img src=\"https://image.tmdb.org/t/p/original${\n        movie.poster_path\n      }\" height=574 alt=\"${movie.original_title}\"/>\n    \n      <p class=\"movie-title\">${movie.original_title}\n      </p>\n      <div class=\"movie-subtitle\">\n        <p class=\"movie-genre\">${movie.genre_ids}\n        </p>\n        <p class=\"movie-year\">${parseInt(movie.release_date)}\n        </p>\n        <p>\n          <button class=\"movie-vote\" type=\"button\">${movie.vote_average.toPrecision(\n            2\n          )}</button>\n        </p>\n      </div>\n    </div>\n  </a>`;\n    })\n    .join('');\n\n  gallery.insertAdjacentHTML('beforeend', markupLibrary);\n};\n\n// -----> EXAMPLE FETCH FOR GALLERY RENDER:\n\n// const API_KEY = 'b118f38ec77100db6763b4cc83604589';\n// const fetchTrendingMovies = async () => {\n//   const movieGallery = `https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY}`;\n//   try {\n//     const response = await fetch(movieGallery);\n//     const movies = await response.json();\n//     return movies;\n//   } catch (error) {\n//     console.log(error);\n//   }\n// };\n\n// const startRenderingTrendingMovies = async () => {\n//   const trendingMovies = await fetchTrendingMovies();\n//   console.log(trendingMovies);\n//   renderMovies(trendingMovies.results);\n// };\n\n// startRenderingTrendingMovies();\n","import { renderMovies } from '../rendering/render';\n\n// ------ nessesary for work ------\nconst apiKey = '11f568ee70218bec08ad7368f7bb3250';\nconst apiUrl = 'https://api.themoviedb.org/3/search/movie';\nconst searchPopularUrl = 'https://api.themoviedb.org/3/movie/popular';\nconst searchGenresUrl = 'https://api.themoviedb.org/3/genre/movie/list';\nconst searchByMovieIdUrl = 'https://api.themoviedb.org/3/movie/';\nlet page = 1;\n\n// może być przydatne do wyciągnięcia języka przeglądarki użytkownika - do zmiany języka strony/opisów filmów itd.\n// const userLocaleLang =\n//   navigator.languages && navigator.languages.length\n//     ? navigator.languages[0]\n//     : navigator.language;\n\n//  1.    ------ Function - fetch - Popular movies ------\nexport const getPopular = async (page = 1) => {\n  try {\n    const response = await fetch(\n      searchPopularUrl + `?api_key=` + apiKey + '&page=' + page\n    );\n    // response Status:404 handling\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    const data = await response.json();\n    console.log('Poniżej przykladowy console.log dla popularnych');\n    console.log(data);\n    // TO DO function here!\n    renderMovies(data.results);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n//  2.    ------ function fetch - get movies by title ------\n// movieTitle is a .value from header input\nexport const getMoviesByTitle = async movieTitle => {\n  try {\n    const response = await fetch(\n      apiUrl + `?api_key=` + apiKey + '&query=' + movieTitle + '&page=' + page\n    );\n    // response Status:404 handling\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    const data = await response.json();\n    console.log(`Poniżej przykladowy console.log dla filmu \"${movieTitle}\"`);\n    console.log(data);\n    //TO DO function here!\n    renderMovies(data.results);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// 3.     ------ function fetch - get whole movies genres ------\n//?api_key=<<api_key>>&language=en-US\nexport const getMovieGenres = async () => {\n  try {\n    const response = await fetch(searchGenresUrl + `?api_key=` + apiKey);\n    // response Status:404 handling\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    const data = await response.json();\n    console.log('Poniżej przykladowy console.log dla listy gatunków');\n    console.log(data);\n    //TO DO function here!\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n//  4.    ------ Function - fetch - get movie details object by movie ID ------\nexport const getMovieById = async movieId => {\n  try {\n    const response = await fetch(\n      searchByMovieIdUrl + movieId + `?api_key=` + apiKey\n    );\n    // response Status:404 handling\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    const data = await response.json();\n    console.log(\n      `Poniżej console.log dla jednego filmu (${data.original_title}) po movieId: ${movieId}`\n    );\n    console.log(data);\n    //TO DO function here!\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n//  5.    ------ Function - fetch - get trailer's url by movie ID ------\nexport const returnTrailerUrlByMovieId = async movieId => {\n  try {\n    const response = await fetch(\n      searchByMovieIdUrl + movieId + '/videos' + `?api_key=` + apiKey\n    );\n    // response Status:404 handling\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    const data = await response.json();\n    const findIndexOfKeyTrailer = data.results.findIndex(\n      youtubeKey => youtubeKey.type === 'Trailer'\n    );\n    const youtubeKey = data.results[findIndexOfKeyTrailer].key;\n    const movieTrailerUrl = `https://www.youtube.com/watch?v=${youtubeKey}`;\n    console.log(\n      `Poniżej link do Video na Youtube jednego filmu po movieId: ${movieId}`\n    );\n    console.log(movieTrailerUrl);\n    return movieTrailerUrl;\n    //TO DO function here!\n  } catch (error) {\n    console.error(error);\n  }\n};\n","import { getMoviesByTitle } from './fetches/movies';\n\nconst GALLERY_DOM = document.querySelector('.gallery');\nconst INPUT_DOM = document.querySelector('.header-input__text-box');\n\nexport function handleSubmit(event) {\n  event.preventDefault();\n\n  const searchingPhrasesTrimmed = INPUT_DOM.value.trim();\n\n  if (!searchingPhrasesTrimmed) {\n    return;\n  }\n\n  GALLERY_DOM.textContent = '';\n  getMoviesByTitle(searchingPhrasesTrimmed);\n}\n","import {\n  getMoviesByTitle,\n  getPopular,\n  getMovieGenres,\n  getMovieById,\n  returnTrailerUrlByMovieId,\n} from './js/fetches/movies.js';\n//*? Powyższy import nie jest jeszcze używany - możliwe, że nie będzie potrzebny w ogóle.\nimport { handleSubmit } from './js/search-form-handler.js';\n\nconst FORM_DOM = document.querySelector('.header-input__form');\n\nFORM_DOM.addEventListener('submit', handleSubmit);\n\n//for result for \"Rambo\" check console and use example from below\n// getMoviesByTitle('Rambo');\ngetPopular();\ngetMovieGenres();\nlet oldMovieIdExample = '1369'; // Film: Rambo First Blood\nlet newMovieIdExample = '603692'; // Film: JOHN WICK: CHAPTER 4 (z 2023 roku)\ngetMovieById(newMovieIdExample);\nreturnTrailerUrlByMovieId(newMovieIdExample);\n// import { renderMovies } from './js/rendering/render.js';\n"],"names":["$bce6340fb64d7774$var$gallery","document","querySelector","$bce6340fb64d7774$export$1a30573fde3dfc62","movies","markupMovies","map","movie","id","poster_path","original_title","genre_ids","parseInt","release_date","vote_average","toPrecision","join","insertAdjacentHTML","$b099a20c123379bc$export$4c39390267f2b109","async","movieTitle","response","fetch","$b099a20c123379bc$var$apiUrl","ok","Error","status","data","json","console","log","results","error","$f196cf184bbcfd78$var$GALLERY_DOM","$f196cf184bbcfd78$var$INPUT_DOM","addEventListener","event","preventDefault","searchingPhrasesTrimmed","value","trim","textContent","page1","$b099a20c123379bc$var$searchPopularUrl","$b099a20c123379bc$var$searchGenresUrl","movieId","$b099a20c123379bc$var$searchByMovieIdUrl","findIndexOfKeyTrailer","findIndex","youtubeKey","type","movieTrailerUrl","key"],"version":3,"file":"index.216bcb03.js.map"}